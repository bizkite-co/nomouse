* USE SPACES INSTEAD OF TABS.
* AVOID LONG LINES, which are any lines over 88 characters in length.
* This Astro static website uses NPM and is deployed to GitHub Pages.
* NEVER run `npm run dev`. That will leave you waiting forever for a response because it runs in "watch" mode and only returns a response when the web server stops.
    * Assume it is already running.
    * If the webserver appears not to be running, as the user to run `npm run dev`.
* Try to limit file size to about 100 lines.
    * If they go over that size, parse functions out to other files.
* use the repo remote address `github.com:bizkite-co/nomouse` to determine the repo name and owner.
* Use the GitHub MCP to read, add, and update GitHub issues on this repo.
* Comments on progress should be added as comments on the Issue, not as edits to the issue.
* Be sure to set the Issue Type: [Featur, Bug, Task], depending on it's type.
* Add the Issue to the project by switching to Code mode and executing a command of this format:
    `gh project item-add 5 --url https://github.com/bizkite-co/nomouse/issues/<issue number> --owner bizkite-co`
* Use the GH Project Number, not the ID, to refer to the project.
* ```gh project list --owner bizkite-co
    NUMBER  TITLE                 STATE  ID
    5       TextNav      open   PVT_kwDOBVBs1c4AzFGJ
    ```
* Use the GitHub CLI for GitHub actions not available in the MCP.
* When the Issue is complete and the user agrees, create commit with a multi-line commit message starting with `fix #<issue number> <issue-title>`. That will close the issue.
* Use industry standard best practice coding standards and file structure and naming conventions.
* Prefer unit tests over logging wherever possible.
* Break problems down into smaller problems until you can find the tiny problem that's causeing the bigger problems.
