---
import Search from "../components/Search.tsx";
import Navbar from "../components/Navbar.tsx";
import Layout from "../layouts/Layout.astro";
import { Button } from "../components/ui/button.tsx";
import "../styles/globals.css";
import { cn } from "../lib/utils.ts";
import { Globe } from "lucide-react";
import Giscus from "../components/Giscus.astro";

import { getCollection, type CollectionEntry } from "astro:content";
import WebsiteItem from "../components/WebsiteItem.astro";
import { ModeToggle } from "../components/ModeToggle.tsx";
import BuyCoffee from "../components/BuyCoffee.astro";
import GitHubRepo from "../components/GitHubRepo.astro";
import XButton from "../components/XButton.astro";
import { filterWebsites } from "../lib/utils.ts";
import { searchKeyword } from "../store";
import type { WebsiteData } from '../types.js';

const websites = await getCollection(
  "websites",
  (entry: CollectionEntry<'websites'>) => !entry.id.endsWith('raw.md') && entry.id.endsWith('index.md'),
);
const websiteData: WebsiteData[] = websites.map((website: CollectionEntry<'websites'>) => {
  const slug = website.id.replace('/index.md', '');
  return {
    title: website.data.title,
    description: website.data.description,
    url: website.data.url,
    favicon: website.data.favicon,
    slug: slug,
    desktopSnapshot: '/' + website.data.desktopSnapshot,
    tags: website.data.tags || [],
  };
});

// Get the search query from the URL
const urlParams = new URLSearchParams(Astro.url.search);
const searchQuery = urlParams.get('q') || '';

// Filter websites based on the search keyword
const filteredWebsiteData = filterWebsites(websiteData, searchQuery, []);

---

<Layout title="TextNav">
  <main class="flex min-h-screen flex-col">
    <Navbar />
    <section
      class="container z-10 mx-auto -mb-32 flex max-w-6xl flex-col px-4 py-16 md:px-8"
    >
      <div class="flex flex-col items-end gap-8 md:flex-row md:gap-16">
        <div class="col-span-2 flex flex-1 flex-col">
          <h1 class="mb-6 text-4xl leading-tight">
            <strong>Up to date</strong><br />
            <span class="font-light">Text Nav UIs</span>
          </h1>
          <Search client:load className="w-full" />
        </div>
        <div
          class="flex aspect-video w-96 max-w-full items-center justify-center rounded border border-dashed bg-background shadow"
        >
          <span class="font-light text-muted-foreground"
            >Featured banner goes here</span
          >
        </div>
      </div>
    </section>
    <section
      class="to-red h-32 bg-gradient-to-b from-white to-muted dark:from-black dark:to-muted"
    >
    </section>
    <section class={cn("flex-1 bg-muted pb-4 md:pb-12")}>
      <div
        class={cn(
          "container mx-auto px-4 md:px-0",
          "grid grid-cols-1 gap-4 md:grid-cols-2 md:gap-8 lg:grid-cols-3 xl:grid-cols-4",
        )}
      >
        {filteredWebsiteData.map((website) => (
            <WebsiteItem
              title={website.title}
              description={website.description}
              url={website.url}
              favicon={website.favicon}
              slug={website.slug}
              desktopSnapshot={website.desktopSnapshot}
            />
        ))}
      </div>
    </section>
    <section class={cn("flex-1 bg-muted pb-4 md:pb-12")}>
      <Giscus />
    </section>

    <footer class="pb-32 pt-4 md:pb-8 md:pt-8">
      <div class="container mx-auto px-4 text-sm md:px-0">
        <div
          class="flex flex-col-reverse items-center justify-between gap-2 md:flex-row"
        >
          <p class="text-muted-foreground">
            Brought to you by <a
              class="underline"
              href="https://lukenguyen.me"
              target="_blank">@lukenguyen.me</a
            >
          </p>
          <div class="flex items-center gap-1">
            <a href="https://lukenguyen.me" target="_blank">
              <Button variant="ghost" size="icon"><Globe /></Button>
            </a>
            <GitHubRepo />
           <XButton /> 
            <BuyCoffee />
          </div>
        </div>
      </div>
    </footer>
  </main>
</Layout>

<script>
  document.addEventListener('search-updated', (event: Event) => {
    const customEvent = event as CustomEvent;
    const searchTerm = customEvent.detail.searchTerm;
    const url = new URL(window.location.href);
    if (searchTerm) {
      url.searchParams.set('q', searchTerm);
    } else {
      url.searchParams.delete('q');
    }
    window.history.pushState({}, '', url.toString());
  });
</script>
